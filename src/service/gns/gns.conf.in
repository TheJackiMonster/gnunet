[gns]
START_ON_DEMAND = @START_ON_DEMAND@
IMMEDIATE_START = YES
HOSTNAME = localhost
BINARY = gnunet-service-gns
UNIXPATH = $GNUNET_RUNTIME_DIR/gnunet-service-gns.sock

# Do we require users that want to access GNS to run this process
# (usually not a good idea)
UNIX_MATCH_UID = NO

# Do we require users that want to access GNS to be in the 'gnunet' group?
UNIX_MATCH_GID = YES

# How many queries is GNS allowed to perform in the background at the same time?
MAX_PARALLEL_BACKGROUND_QUERIES = 1000

# Should we use the DNS interception mechanism?  If set to YES
# we will ask gnunet-service-dns to pass DNS queries to us. Otherwise,
# we only answer GNS queries via the API (which itself may be
# called via NSS or other mechanisms).
INTERCEPT_DNS = NO

# PREFIX = valgrind --leak-check=full --track-origins=yes

[gns-proxy]
BINARY = gnunet-gns-proxy
START_ON_DEMAND = NO
RUN_PER_USER = YES
BIND_TO=127.0.0.1
BIND_TO6=::1

# Where is the certificate for the GNS proxy stored?
PROXY_CACERT = $GNUNET_DATA_HOME/gns/gns_ca_cert.pem
PROXY_UNIXPATH = $GNUNET_RUNTIME_DIR/gnunet-gns-proxy.sock

[bcd]
BINARY = gnunet-bcd
OPTIONS = -p 8888
START_ON_DEMAND = NO
RUN_PER_USER = YES

[dns2gns]
BINARY = gnunet-dns2gns
START_ON_DEMAND = NO
RUN_PER_USER = NO
BIND_TO=127.0.0.1
BIND_TO6=::1

# -d: DNS resolver to use
OPTIONS = -d 9.9.9.9
PORT = 15353

# This setting is useful in combination with systemd-resolve and
# NetworkManager-dispatcher. It allows the interfaces to automatically
# configure the dns2gns server for interfaces going up
# See also: contrib/packages/fedora/10-dns2gns.sh
ENABLE_RESOLVECTL_NMDISPATCHER = NO
